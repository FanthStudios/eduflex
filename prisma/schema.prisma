// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int     @unique
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  isSubscribed      Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  email     String    @unique
  password  String
  lastLogin DateTime?
  role      String
  accounts  Account[]
  sessions  Session[]
  student   Student?
  teacher   Teacher?
}

model Class {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  students Student[]
}

model Student {
  userId           Int                  @id
  user             User                 @relation(fields: [userId], references: [id])
  classId          Int
  studentsClass    Class                @relation(fields: [classId], references: [id])
  appointments     StudentAppointment[]
  favoriteTeachers Teacher[]            @relation("FavoriteTeachers")
}

model Teacher {
  userId       Int           @id
  user         User          @relation(fields: [userId], references: [id])
  subjects     Subject[]     @relation("TeacherSubjects")
  appointments Appointment[]
  favoritedBy  Student[]     @relation("FavoriteTeachers")
}

model Subject {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  teachers     Teacher[]     @relation("TeacherSubjects")
  appointments Appointment[]
}

model Location {
  id           String        @id @default(cuid())
  lat          Float
  lng          Float
  city         String
  postalCode   String
  address      String       @unique
  appointments Appointment[]
}

enum Recurring {
  NEVER
  WEEKLY
  BIWEEKLY
  MONTHLY
}

model Appointment {
  id                  String               @id @default(cuid())
  dateTime            DateTime
  roomNumber          Int
  recurring           Recurring
  subjectId           Int
  subject             Subject              @relation(fields: [subjectId], references: [id])
  teacherId           Int
  teacher             Teacher              @relation(fields: [teacherId], references: [userId])
  locationAddress     String
  location            Location             @relation(fields: [locationAddress], references: [address])
  studentAppointments StudentAppointment[]
  availableSlots      Int
}

model StudentAppointment {
  studentId     Int        @unique
  appointmentId String
  subject       String
  goal          String
  topic         String?
  student       Student     @relation(fields: [studentId], references: [userId])
  appointment   Appointment @relation(fields: [appointmentId], references: [id])

  @@id([studentId, appointmentId])
}

enum Role {
  STUDENT
  TEACHER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}
