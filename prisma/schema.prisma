// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id    Int     @id @default(autoincrement())
  userId Int    @unique
  type  String
  provider String
  providerAccountId String
  refreshToken String?
  accessToken String?
  expiresAt Int?
  tokenType String?
  scope String?
  idToken String?
  sessionState String?
  isSubscribed Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  lastLogin DateTime?
  role      String
  accounts  Account[]
  sessions  Session[]
  student   Student?
  teacher   Teacher?
}

model Class {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  students  Student[]
}

model Student {
  userId              Int                   @id
  user                User                  @relation(fields: [userId], references: [id])
  classId             Int
  studentsClass       Class                 @relation(fields: [classId], references: [id])
  appointments        StudentAppointment[]
  favoriteTeachers    Teacher[]             @relation("FavoriteTeachers")
}

model Teacher {
  userId        Int             @id
  user          User            @relation(fields: [userId], references: [id])
  subjects      Subject[]       @relation("TeacherSubjects")
  appointments  Appointment[]
  favoritedBy   Student[]       @relation("FavoriteTeachers")
}

model Subject {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  teachers      Teacher[]       @relation("TeacherSubjects")
  appointments  Appointment[]
}

model Location {
  id             Int            @id @default(autoincrement())
  lat            Float          @unique
  lng            Float          @unique
  city           String
  postalCode     String
  address        String         @unique
  appointments   Appointment[]
}

enum Recurring {
  NEVER
  WEEKLY
  BIWEEKLY
  MONTHLY
}

model Appointment {
  id                  Int                     @id @default(autoincrement())
  dateTime            DateTime
  roomNumber          Int
  recurring           Recurring
  subjectId           Int
  subject             Subject                 @relation(fields: [subjectId], references: [id])
  teacherId           Int
  teacher             Teacher                 @relation(fields: [teacherId], references: [userId])
  locationId          Int                     @unique
  location            Location                @relation(fields: [locationId], references: [id])
  studentAppointments StudentAppointment[]
}

model StudentAppointment {
  studentId     Int
  appointmentId Int
  topic         String
  goal          Goal
  description   String?
  student       Student       @relation(fields: [studentId], references: [userId])
  appointment   Appointment   @relation(fields: [appointmentId], references: [id])

  @@id([studentId, appointmentId])
}

enum Role {
  STUDENT
  TEACHER
}

enum Goal {
  CORRECT_TEST
  COREPETITIONS
}

model VerificationToken {
  identifier  String
  token       String    @unique
  expires     DateTime

  @@id([identifier, token])
}
