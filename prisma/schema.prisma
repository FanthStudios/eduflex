generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int     @unique
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  isSubscribed      Boolean @default(false)
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  firstName      String
  lastName       String
  password       String
  role           String
  lastLogin      DateTime?
  accounts       Account?
  sessions       Session[]
  student        Student?
  teacher        Teacher?
  activationCode ActivationCode?
  notifications  Notification[]
}

model Class {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  students Student[]
}

model Student {
  userId           Int                  @id
  classId          Int
  studentsClass    Class                @relation(fields: [classId], references: [id], onDelete: NoAction)
  user             User                 @relation(fields: [userId], references: [id], onDelete: NoAction)
  appointments     StudentAppointment[]
  favoriteTeachers Teacher[]            @relation("FavoriteTeachers")

  @@index([classId], map: "Student_classId_fkey")
}

model Teacher {
  userId       Int           @id
  appointments Appointment[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  favoritedBy  Student[]     @relation("FavoriteTeachers")
  subjects     Subject[]     @relation("TeacherSubjects")
}

model Subject {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  appointments Appointment[]
  teachers     Teacher[]     @relation("TeacherSubjects")
}

model Location {
  id           String        @id @default(cuid())
  lat          Float
  lng          Float
  city         String
  postalCode   String
  address      String        @unique
  appointments Appointment[]
}

model ActivationCode {
  value  String    @unique
  userId Int?      @unique
  date   DateTime
  user   User?     @relation(fields: [userId], references: [id], onDelete: NoAction)
}

model Appointment {
  id                  String               @id @default(cuid())
  teacherId           Int
  subjectId           Int
  dateTime            DateTime
  recurring           Recurring
  roomNumber          Int
  locationAddress     String
  availableSlots      Int
  location            Location             @relation(fields: [locationAddress], references: [address], onDelete: NoAction)
  subject             Subject              @relation(fields: [subjectId], references: [id], onDelete: NoAction)
  teacher             Teacher              @relation(fields: [teacherId], references: [userId], onDelete: NoAction)
  studentAppointments StudentAppointment[]

  @@index([locationAddress], map: "Appointment_locationAddress_fkey")
  @@index([subjectId], map: "Appointment_subjectId_fkey")
  @@index([teacherId], map: "Appointment_teacherId_fkey")
}

model StudentAppointment {
  studentId     Int
  appointmentId String
  goal          String
  subject       String
  topic         String?
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  student       Student     @relation(fields: [studentId], references: [userId], onDelete: Cascade)

  @@id([studentId, appointmentId])
  @@index([appointmentId], map: "StudentAppointment_appointmentId_fkey")
  @@index([studentId], map: "StudentAppointment_studentId_key")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  reason    String   @default("")
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

enum Recurring {
  NEVER
  WEEKLY
  BIWEEKLY
  MONTHLY
}
